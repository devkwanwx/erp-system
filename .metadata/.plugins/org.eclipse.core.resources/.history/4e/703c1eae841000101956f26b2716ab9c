package com.kwanwx.erp.controller;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.kwanwx.erp.mapper.UserMapper;
import com.kwanwx.erp.model.User;
import com.kwanwx.erp.service.UserService;

@RestController
@RequestMapping("/users") // 기본 URL
public class UserController {

	private final UserService userService;
	
	@Autowired
	public UserController(UserService userService) {
		this.userService = userService;
	}

	@CrossOrigin(origins = "*")
	@PostMapping("/register") // 회원가입 API
	public ResponseEntity<String> registerUser(@RequestBody User user) {
		userService.registerUser(user);
		return ResponseEntity.ok("회원가입이 완료되었습니다."); // 성공 시 응답 메시지
	}

	@PostMapping("/login")
	public ResponseEntity<?> login(@RequestBody Map<String, String> loginRequest) { // JSON으로 받은 아이디/비밀번호를 Map으로 변환
		String userName = loginRequest.get("userName");
		String password = loginRequest.get("password");
		
		String token = userService.login(userName, password);
		if (token != null) {
			return ResponseEntity.ok().body(Map.of("token", token));
		} else {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("로그인 실패: 아이디 또는 비밀번호가 올바르지 않습니다.");
		}
	}
	
	@GetMapping("/me")
	public ResponseEntity<?> getCurrentUser() {
		// SecurityContextHolder에서 현재 인증된 사용자 정보 가져오기
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		if (authentication != null && authentication.getPrincipal() != null) {
			String userName = authentication.getPrincipal().toString();
			return ResponseEntity.ok(Map.of("userName", userName));
		} else {
			return ResponseEntity.status(401).body("인증 정보가 없습니다.");
		}
	}
	
	@GetMapping("/admin")
	public ResponseEntity<?> adminEndpoint() {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		boolean isAdmin = authentication.getAuthorities().stream().anyMatch(authority -> authority.getAuthority().equals("ROLE_ADMIN"))
		
		// admin 사용자만 접근 허용
		if (isAdmin) {
			return ResponseEntity.ok("관리자 전용 데이터입니다.");
		} else {
			return ResponseEntity.status(HttpStatus.FORBIDDEN).body("접근이 거부되었습니다.");
		}
	}
}
