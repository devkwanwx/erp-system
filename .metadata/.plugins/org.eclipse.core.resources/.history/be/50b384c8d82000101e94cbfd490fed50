package com.kwanwx.erp.config;

import org.springframework.core.MethodParameter;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.server.ServerHttpRequest;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;

import com.kwanwx.erp.dto.ApiResponse;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestControllerAdvice(basePackges = "com.kwanwx.erp.controller")
public class ApiResponseWrapperAdvice implements ResponseBodyAdvice<Object> {
	
	@Override
	public boolean supports(MethodParameter returnType, Class converterType) {
		
		// ApiResponse로 이미 감싸진 것은 다시 감싸지 않도록 필터링
		return !returnType.getParameterType().equals(ApiResponse.class);
	}

	@Override
	public Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType,
			Class selectedConverterType, ServerHttpRequest request, ServerHttpResponse response) {
		
		// null 응답은 빈 선공으로
		if (body == null) {
			return ApiResponse.of(null);
		}
		
		// ApiResponse 인스턴스가 아니면 모두 ApiResponse.of(...)로 감싸기
		if (body instanceof ApiResponse) {
			return body;
		}
		
		return ApiResponse.of(body);
	}
	
	@ExceptionHandler(Exception.class)
	public ResponseEntity<ApiResponse<Void>> handleAll(Exception ex) {
		log.error("Ungandled exception caught in ApiResponseWrapperAdvice", ex);
		
		return ResponseEntity
				.status(HttpStatus.INTERNAL_SERVER_ERROR)
				.body(ApiResponse.error("서버 오류가 발생했습니다."));
	}
}
